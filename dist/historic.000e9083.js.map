{"version":3,"sources":["historic.js"],"names":["document","addEventListener","stateSelect","getElementById","chartElement","dayElements","querySelectorAll","posBarElements","deathsBarElements","dateElements","updateResults","location","value","getCovidData","formattedResults","r","fieldsToDisplay","filteredResults","slice","map","day","results","forEach","field","formatResults","state","url","response","fetch","status","data","json","console","log","largestPos","reduce","acc","positiveIncrease","largestD","deathIncrease","index","style","height","dataset","total","innerText","Date","lastUpdateEt","toLocaleDateString","evt","currentTarget"],"mappings":";AAAAA,SAASC,iBAAiB,mBAAoB,UACtCC,MAAAA,EAAcF,SAASG,eAAe,eACtCC,EAAeJ,SAASG,eAAe,SACvCE,EAAcD,EAAaE,iBAAiB,QAC5CC,EAAiBH,EAAaE,iBAAiB,QAC/CE,EAAoBJ,EAAaE,iBAAiB,WAClDG,EAAeL,EAAaE,iBAAiB,SAEpCI,eAAAA,EAAcC,GAAWT,EAAcA,EAAYU,MAAQ,OAClEC,MAiCAC,EAnBgB,SAAUC,GACxBC,MAAAA,EAAkB,CACtB,eACA,gBACA,oBAWKC,OATMF,EAAEG,MAAM,EAAG,GACKC,IAAIC,IACzBC,MAAAA,EAAU,GAITA,OAHPL,EAAgBM,QAAQC,IACtBF,EAAQE,GAASH,EAAIG,KAEhBF,IAOcG,OAjCJ,eAAgBC,EAAQd,GACrCe,MAAAA,6CAAiDD,eACjDE,QAAiBC,MAAMF,GACzBC,GAAoB,MAApBA,EAASE,OAQNC,aADYH,EAASI,OAN1BC,QAAQC,IACN,gDAAkDN,EAASE,QA2BrChB,CAAaF,IAEzCqB,QAAQC,IAAInB,GAENoB,MAAAA,EAAapB,EAAiBqB,OAAO,CAACC,EAAKhB,IAC/CgB,EAAMhB,EAAIiB,iBAAmBD,EAAMhB,EAAIiB,iBAAmBD,EAEzD,GACGE,EAAWxB,EAAiBqB,OAAO,CAACC,EAAKhB,IAC7CgB,EAAMhB,EAAImB,cAAgBH,EAAMhB,EAAImB,cAAgBH,EAEnD,GAEH/B,EAAYiB,QAAQ,CAACF,EAAKoB,KACxBjC,EAAeiC,GAAOC,MAAMC,UAAY5B,EAAiB0B,GAAOH,iBAAmBH,EAAa,OAChG3B,EAAeiC,GAAOG,QAAQC,SAAW9B,EAAiB0B,GAAOH,mBACjE7B,EAAkBgC,GAAOC,MAAMC,OAASJ,EAAW,KAC9CxB,EAAiB0B,GAAOD,cAAgBD,EAAW,OACtD,EACF9B,EAAkBgC,GAAOG,QAAQC,SAAW9B,EAAiB0B,GAAOD,gBACpE9B,EAAa+B,GAAOK,UAAY,IAAIC,KAAKhC,EAAiB0B,GAAOO,cAAcC,uBAInF9C,EAAYD,iBAAiB,SAAWgD,IACtCjB,QAAQC,IAAIgB,EAAIC,cAActC,OAC9BF,EAAcuC,EAAIC,cAActC,SAGlCF","file":"historic.000e9083.js","sourceRoot":"..","sourcesContent":["document.addEventListener(\"DOMContentLoaded\", async () => {\n  const stateSelect = document.getElementById(\"StateSelect\");\n  const chartElement = document.getElementById('Chart')\n  const dayElements = chartElement.querySelectorAll('.day')\n  const posBarElements = chartElement.querySelectorAll('.pos')\n  const deathsBarElements = chartElement.querySelectorAll('.deaths')\n  const dateElements = chartElement.querySelectorAll('.date')\n\n  async function updateResults(location = stateSelect ? stateSelect.value : 'nj') {\n    const getCovidData = async function (state = location) {\n      const url = `https://api.covidtracking.com/v1/states/${state}/daily.json`;\n      const response = await fetch(url);\n      if (response.status !== 200) {\n        console.log(\n          \"Looks like there was a problem. Status Code: \" + response.status\n        );\n        return;\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    const formatResults = function (r) {\n      const fieldsToDisplay = [\n        \"lastUpdateEt\",\n        \"deathIncrease\",\n        \"positiveIncrease\",\n      ];\n      const week = r.slice(0, 7)\n      const filteredResults = week.map(day => {\n        const results = {}\n        fieldsToDisplay.forEach(field => {\n          results[field] = day[field]\n        })\n        return results\n      })\n\n      return filteredResults\n    };\n\n    const fetchResponse = await getCovidData(location);\n    const formattedResults = formatResults(fetchResponse);\n    console.log(formattedResults);\n\n    const largestPos = formattedResults.reduce((acc, day) => {\n      acc = day.positiveIncrease > acc ? day.positiveIncrease : acc\n      return acc\n    }, 0)\n    const largestD = formattedResults.reduce((acc, day) => {\n      acc = day.deathIncrease > acc ? day.deathIncrease : acc\n      return acc\n    }, 0)\n\n    dayElements.forEach((day, index) => {\n      posBarElements[index].style.height = `${formattedResults[index].positiveIncrease / largestPos * 100}%`\n      posBarElements[index].dataset.total = `${formattedResults[index].positiveIncrease}`\n      deathsBarElements[index].style.height = largestD > 0 ?\n        `${formattedResults[index].deathIncrease / largestD * 100}%` :\n        0\n      deathsBarElements[index].dataset.total = `${formattedResults[index].deathIncrease}`\n      dateElements[index].innerText = new Date(formattedResults[index].lastUpdateEt).toLocaleDateString()\n    })\n  }\n\n  stateSelect.addEventListener(\"change\", (evt) => {\n    console.log(evt.currentTarget.value);\n    updateResults(evt.currentTarget.value);\n  });\n\n  updateResults();\n});\n"]}