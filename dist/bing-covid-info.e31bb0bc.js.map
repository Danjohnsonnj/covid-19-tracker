{"version":3,"sources":["index.js"],"names":["getCovidData","url","response","fetch","status","console","log","data","json","fetchResponse","formatResults","r","deprecatedData","filteredResults","Object","keys","reduce","acc","key","includes","date","Date","lastUpdateEt","updated","toDateString","toLocaleTimeString","results","positiveCases","positiveCasesViral","positiveIncrease","recovered","death","deathIncrease","hospitalizedCurrently","hospitalizedIncrease","inIcuCurrently","formattedResults","dataTable","document","getElementById","forEach","querySelector","innerHTML"],"mappings":"AAAA,CAAC,YAAY;AACX,QAAMA,YAAY,GAAG,gBAAgBC,GAAhB,EAAqB;AACxC,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA1B;;AACA,QAAIC,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,kDACVJ,QAAQ,CAACE,MADX;AAEA;AACD;;AAED,QAAIG,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAjB;AACA,WAAOD,IAAP;AACD,GAVD;;AAWA,QAAME,aAAa,GAAG,MAAMT,YAAY,CAAC,yDAAD,CAAxC;;AAEA,QAAMU,aAAa,GAAG,UAAUC,CAAV,EAAa;AACjC,UAAMC,cAAc,GAAG,CACrB,aADqB,EAErB,iBAFqB,EAGrB,aAHqB,EAIrB,cAJqB,EAKrB,OALqB,EAMrB,MANqB,EAOrB,cAPqB,EAQrB,kBARqB,EASrB,sBATqB,EAUrB,eAVqB,EAWrB,QAXqB,EAYrB,eAZqB,EAarB,OAbqB,EAcrB,OAdqB,CAAvB;AAgBA,UAAMC,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYJ,CAAZ,EAAeK,MAAf,CAAsB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC1D,UAAI,CAACN,cAAc,CAACO,QAAf,CAAwBD,GAAxB,CAAL,EAAmC;AACjCD,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWP,CAAC,CAACO,GAAD,CAAZ;AACD;;AACD,aAAOD,GAAP;AACD,KALuB,EAKrB,EALqB,CAAxB;AAMAZ,IAAAA,OAAO,CAACC,GAAR,CAAYO,eAAZ;AAEA,UAAMO,IAAI,GAAG,IAAIC,IAAJ,CAASR,eAAe,CAACS,YAAzB,CAAb;AACA,UAAMC,OAAO,GAAI,GAAEH,IAAI,CAACI,YAAL,EAAoB,UAASJ,IAAI,CAACK,kBAAL,EAA0B,EAA1E;AACA,UAAMC,OAAO,GAAG;AACdH,MAAAA,OADc;AAEdI,MAAAA,aAAa,EAAEd,eAAe,CAACe,kBAFjB;AAGdC,MAAAA,gBAAgB,EAAEhB,eAAe,CAACgB,gBAHpB;AAIdC,MAAAA,SAAS,EAAEjB,eAAe,CAACiB,SAJb;AAKdC,MAAAA,KAAK,EAAElB,eAAe,CAACkB,KALT;AAMdC,MAAAA,aAAa,EAAEnB,eAAe,CAACmB,aANjB;AAOdC,MAAAA,qBAAqB,EAAEpB,eAAe,CAACoB,qBAPzB;AAQdC,MAAAA,oBAAoB,EAAErB,eAAe,CAACqB,oBARxB;AASdC,MAAAA,cAAc,EAAEtB,eAAe,CAACsB;AATlB,KAAhB;AAWA,WAAOT,OAAP;AACD,GAvCD;;AAyCA,QAAMU,gBAAgB,GAAG1B,aAAa,CAACD,aAAD,CAAtC;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY8B,gBAAZ;AAEA,QAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAlB;AACAzB,EAAAA,MAAM,CAACC,IAAP,CAAYqB,gBAAZ,EAA8BI,OAA9B,CAAsCtB,GAAG,IAAI;AAC3CmB,IAAAA,SAAS,CAACI,aAAV,CAAyB,IAAGvB,GAAI,EAAhC,EAAmCwB,SAAnC,GAA+CN,gBAAgB,CAAClB,GAAD,CAA/D;AACD,GAFD;AAGD,CA9DD","file":"bing-covid-info.e31bb0bc.js","sourceRoot":"..","sourcesContent":["(async () => {\n  const getCovidData = async function (url) {\n    let response = await fetch(url)\n    if (response.status !== 200) {\n      console.log('Looks like there was a problem. Status Code: ' +\n        response.status);\n      return;\n    }\n\n    let data = await response.json()\n    return data;\n  };\n  const fetchResponse = await getCovidData('https://covidtracking.com/api/v1/states/nj/current.json');\n\n  const formatResults = function (r) {\n    const deprecatedData = [\n      'checkTimeEt',\n      'commercialScore',\n      'dateChecked',\n      'dateModified',\n      'grade',\n      'hash',\n      'hospitalized',\n      'negativeIncrease',\n      'negativeRegularScore',\n      'negativeScore',\n      'posNeg',\n      'positiveScore',\n      'score',\n      'total',\n    ]\n    const filteredResults = Object.keys(r).reduce((acc, key) => {\n      if (!deprecatedData.includes(key)) {\n        acc[key] = r[key];\n      }\n      return acc;\n    }, {});\n    console.log(filteredResults)\n\n    const date = new Date(filteredResults.lastUpdateEt);\n    const updated = `${date.toDateString()}<br>at ${date.toLocaleTimeString()}`;\n    const results = {\n      updated,\n      positiveCases: filteredResults.positiveCasesViral,\n      positiveIncrease: filteredResults.positiveIncrease,\n      recovered: filteredResults.recovered,\n      death: filteredResults.death,\n      deathIncrease: filteredResults.deathIncrease,\n      hospitalizedCurrently: filteredResults.hospitalizedCurrently,\n      hospitalizedIncrease: filteredResults.hospitalizedIncrease,\n      inIcuCurrently: filteredResults.inIcuCurrently,\n    };\n    return results;\n  }\n\n  const formattedResults = formatResults(fetchResponse);\n  console.log(formattedResults);\n\n  const dataTable = document.getElementById('CurrentData');\n  Object.keys(formattedResults).forEach(key => {\n    dataTable.querySelector(`.${key}`).innerHTML = formattedResults[key];\n  });\n})()"]}