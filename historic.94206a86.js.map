{"version":3,"sources":["historic.js"],"names":["document","addEventListener","stateSelect","getElementById","posBarElements","querySelectorAll","deathsBarElements","updateResults","location","value","getCovidData","formattedResults","r","fieldsToDisplay","filteredResults","slice","map","day","results","forEach","field","formatResults","state","url","response","fetch","status","data","json","console","log","largestPos","reduce","acc","positiveIncrease","largestD","deathIncrease","result","index","posBarEl","style","height","dataset","total","nextElementSibling","innerText","Date","lastUpdateEt","toLocaleDateString","deathsBarEl","evt","currentTarget"],"mappings":";AAAAA,SAASC,iBAAiB,mBAAoB,UACtCC,MAAAA,EAAcF,SAASG,eAAe,eAGtCC,GAFgBJ,SAASK,iBAAiB,UAC5BL,SAASK,iBAAiB,QACvBL,SAASK,iBAAiB,SAC3CC,EAAoBN,SAASK,iBAAiB,WAC/BL,SAASK,iBAAiB,SAEhCE,eAAAA,EAAcC,GAAWN,EAAcA,EAAYO,MAAQ,OAClEC,MAiCAC,EAnBgB,SAAUC,GACxBC,MAAAA,EAAkB,CACtB,eACA,gBACA,oBAWKC,OATMF,EAAEG,MAAM,EAAG,GACKC,IAAIC,IACzBC,MAAAA,EAAU,GAITA,OAHPL,EAAgBM,QAAQC,IACtBF,EAAQE,GAASH,EAAIG,KAEhBF,IAOcG,OAjCJ,eAAgBC,EAAQd,GACrCe,MAAAA,6CAAiDD,eACjDE,QAAiBC,MAAMF,GACzBC,GAAoB,MAApBA,EAASE,OAQNC,aADYH,EAASI,OAN1BC,QAAQC,IACN,gDAAkDN,EAASE,QA2BrChB,CAAaF,IAGnCuB,EAAapB,EAAiBqB,OAAO,CAACC,EAAKhB,IAC/CgB,EAAMhB,EAAIiB,iBAAmBD,EAAMhB,EAAIiB,iBAAmBD,EAEzD,GACGE,EAAWxB,EAAiBqB,OAAO,CAACC,EAAKhB,IAC7CgB,EAAMhB,EAAImB,cAAgBH,EAAMhB,EAAImB,cAAgBH,EAEnD,GAEHtB,EAAiBQ,QAAQ,CAACkB,EAAQC,KAC1BC,MAAAA,EAAWnC,EAAekC,GAChCC,EAASC,MAAMC,UAAYJ,EAAOH,iBAAmBH,EAAa,OAClEQ,EAASG,QAAQC,SAAWN,EAAOH,mBACnCK,EAASK,mBAAmBC,UAAY,IAAIC,KAAKT,EAAOU,cAAcC,qBAEhEC,MAAAA,EAAc3C,EAAkBgC,GACtCW,EAAYT,MAAMC,OAASN,EAAW,KACjCE,EAAOD,cAAgBD,EAAW,OACrC,EACFc,EAAYP,QAAQC,SAAWN,EAAOD,gBACtCa,EAAYL,mBAAmBC,UAAY,IAAIC,KAAKT,EAAOU,cAAcC,uBAI7E9C,EAAYD,iBAAiB,SAAWiD,IACtC3C,EAAc2C,EAAIC,cAAc1C,SAGlCF","file":"historic.94206a86.js","sourceRoot":"..","sourcesContent":["document.addEventListener(\"DOMContentLoaded\", async () => {\n  const stateSelect = document.getElementById(\"StateSelect\");\n  const chartElements = document.querySelectorAll('.chart')\n  const dayElements = document.querySelectorAll('.day')\n  const posBarElements = document.querySelectorAll('.pos')\n  const deathsBarElements = document.querySelectorAll('.deaths')\n  const dateElements = document.querySelectorAll('.date')\n\n  async function updateResults(location = stateSelect ? stateSelect.value : 'nj') {\n    const getCovidData = async function (state = location) {\n      const url = `https://api.covidtracking.com/v1/states/${state}/daily.json`;\n      const response = await fetch(url);\n      if (response.status !== 200) {\n        console.log(\n          \"Looks like there was a problem. Status Code: \" + response.status\n        );\n        return;\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    const formatResults = function (r) {\n      const fieldsToDisplay = [\n        \"lastUpdateEt\",\n        \"deathIncrease\",\n        \"positiveIncrease\",\n      ];\n      const week = r.slice(0, 7)\n      const filteredResults = week.map(day => {\n        const results = {}\n        fieldsToDisplay.forEach(field => {\n          results[field] = day[field]\n        })\n        return results\n      })\n\n      return filteredResults\n    };\n\n    const fetchResponse = await getCovidData(location);\n    const formattedResults = formatResults(fetchResponse);\n\n    const largestPos = formattedResults.reduce((acc, day) => {\n      acc = day.positiveIncrease > acc ? day.positiveIncrease : acc\n      return acc\n    }, 0)\n    const largestD = formattedResults.reduce((acc, day) => {\n      acc = day.deathIncrease > acc ? day.deathIncrease : acc\n      return acc\n    }, 0)\n\n    formattedResults.forEach((result, index) => {\n      const posBarEl = posBarElements[index]\n      posBarEl.style.height = `${result.positiveIncrease / largestPos * 100}%`\n      posBarEl.dataset.total = `${result.positiveIncrease}`\n      posBarEl.nextElementSibling.innerText = new Date(result.lastUpdateEt).toLocaleDateString()\n\n      const deathsBarEl = deathsBarElements[index]\n      deathsBarEl.style.height = largestD > 0 ?\n        `${result.deathIncrease / largestD * 100}%` :\n        0\n      deathsBarEl.dataset.total = `${result.deathIncrease}`\n      deathsBarEl.nextElementSibling.innerText = new Date(result.lastUpdateEt).toLocaleDateString()\n    })\n  }\n\n  stateSelect.addEventListener(\"change\", (evt) => {\n    updateResults(evt.currentTarget.value);\n  });\n\n  updateResults();\n});\n"]}